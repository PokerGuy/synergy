service: synergydeployment
provider:
  name: aws
  runtime: nodejs6.10
  stage: ${opt:AWS_ENV}
  region: us-west-2
  timeout: 300
  memorySize: 1536
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:DeleteObject"
        - "s3:GetObject"
        - "s3:ListBucket"
        - "s3:PutObject"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "kms:Decrypt"
      Resource: 'arn:aws:kms:us-west-2:${file(./serverless.env.yml):${opt:AWS_ENV}.aws_account_number}:key/${file(./serverless.env.yml):${opt:AWS_ENV}.key_guid}'
    - Effect: "Allow"
      Action:
        - "sns:Publish"
      Resource: 'arn:aws:sns:us-west-2:${file(./serverless.env.yml):${opt:AWS_ENV}.aws_account_number}:${opt:AWS_ENV}-clone'
    - Effect: "Allow"
      Action:
        - "cloudformation:*"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "iam:GetRole"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "lambda:UpdateFunctionCode"
        - "lambda:UpdateFunctionConfig"
        - "lambda:GetFunctionConfiguration"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - dynamodb:*
      Resource:
        - "*"
  environment:
    AWS_ENV: ${opt:AWS_ENV}
    GIT_SECRET: ${file(./serverless.env.yml):${opt:AWS_ENV}.git_secret}
    AWS_ACCOUNT_NUMBER: ${file(./serverless.env.yml):${opt:AWS_ENV}.aws_account_number}


package:
#  include:
#    - include-me.js
#    - include-me-dir/**
  exclude:
    - node_modules/aws-sdk/**
# The node aws-sdk is already part of the lambda...

functions:
  githook:
    handler: handler.authenticate
    events:
      - http:
          path: githook
          method: post
  deploy:
    handler: handler.deploy
    events:
      - sns: ${opt:AWS_ENV}-clone

resources:
  Resources:
    websiteBucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: ${file(./serverless.env.yml):${opt:AWS_ENV}.subdomain}.build.magickpics.com
        WebsiteConfiguration:
          IndexDocument: index.html
    websiteBucketPolicy:
      Type: "AWS::S3::BucketPolicy"
      Properties:
        Bucket: ${file(./serverless.env.yml):${opt:AWS_ENV}.subdomain}.build.magickpics.com
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: Allow
              Principal: "*"
              Action: s3:GetObject
              Resource: "arn:aws:s3:::${file(./serverless.env.yml):${opt:AWS_ENV}.subdomain}.build.magickpics.com/*"
    lambdaKey:
      Type: AWS::KMS::Key
      Properties:
        Description: "Used for encryption/decryption of lambda secrets"
        KeyPolicy:
          Version: "2012-10-17"
          Id: "${opt:AWS_ENV}-synergy-lambda-key"
          Statement:
            -
              Sid: "Super User"
              Effect: "Allow"
              Principal:
                AWS: "arn:aws:iam::${file(./serverless.env.yml):${opt:AWS_ENV}.aws_account_number}:user/evan.zlotnick"
              Action:
                - "kms:*"
              Resource: "*"
            -
              Sid: "Lambda Role"
              Effect: "Allow"
              Principal:
                AWS: "arn:aws:iam::${file(./serverless.env.yml):${opt:AWS_ENV}.aws_account_number}:role/${self:service}-${opt:AWS_ENV}-us-west-2-lambdaRole"
              Action:
                - "kms:Decrypt"
              Resource: "*"
    buildLockTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: "start_time"
            AttributeType: "N"
          - AttributeName: "repo_name"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "start_time"
            KeyType: "HASH"
          - AttributeName: "repo_name"
            KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "build_lock"
  Outputs: